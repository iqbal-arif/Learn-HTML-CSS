Intro to accessibility
Last updated April 2022

This course bakes accessibility into the learning journey of HTML and CSS. It's a core concept that we'll keep coming back to in this course. But what does 'accessibility' mean?

In the English language, the word accessibility means:

    the quality of being able to be reached or entered.

In the context of programming, accessibility refers to:

    Accessibility can be viewed as the "ability to access" and benefit from some system. The concept focuses on enabling access for people with disabilities or enabling access through assistive technology. Improved accessibility benefits everyone. (From Wikipedia)

We'll come back to assistive technology in a bit.

In the context of HTML (and websites in general), accessibility refers to making your website usable for everyone.
Why is it important?

We sometimes think about accessibility being either 1 or 0 (True or False). You either have it, or you don't. We also believe that if you do not have any disability, then this will not change forever. However, this is far from the truth.

Disability is a spectrum. It covers a wide range of sometimes 'weakened' abilities. For example (but not limited to):

    vision impairment.
    deaf or hard of hearing.
    mental health conditions.
    intellectual disability.
    acquired brain injury.
    autism spectrum disorder.
    physical disability.

It's important not to approach the concept of accessibility as a 1 or 0 (True or False). That's because people have a range of abilities.
People have a range of abilities

The paragraphs below were taken from gov.uk's excellent blog post: What we mean when we talk about accessibility

    All too often services are designed with the perfect user in mind. But, people's functional abilities vary hugely. Sight and hearing ranges from perfect to none, with a full spectrum in between. People's literacy levels and memory vary due to common conditions such as dyslexia, autism, dementia and stress. Physical ability vary with differences in mobility, dexterity, strength and levels of pain.

    As we get older our functional abilities deteriorate. Over half of the population over the age of 65 experience some kind of disability.

    We also all experience temporary disabilities caused by illness or injury. We experience situational disabilities such as not being able to hear well due to being in a noisy room or not being able to see well due to bright sunlight.

    We need to deliver services that accommodate the range of abilities that the people using them actually have.

As we get older, our functional abilities deteriorate

It's sometimes important to stress this one. When you write accessible code, your future self will thank you. We are writing websites that we will use years from now. Our range of abilities might very well change a few years from now.
Benefits of accessibility

Accessibility is not a chore. There are plenty of benefits that you will get when you write accessible code!

Here are some benefits of accessibility:

    It's a technical skill that you add to your tool belt.
    It helps you practice empathy.
    It increases the conversion rate for your product as you allow more people to use it.
    You get to decide whether you give people access or deny them access to your product. By making it accessible, you are allowing them to access it.
    In some countries or organizations, accessibility is a legal requirement. That is the case in several countries.

In this course, you will learn about accessibility step by step as we learn new concepts in HTML/CSS. This will make the concept of accessibility accessible ;).

Headings & Accessibility 
Last updated April 2022
In the previous chapter, we learned about the Heading (level) 1 element h1.

In this lesson, we'll get a short introduction to the impact of headings on accessibility.

In the previous lesson, we mentioned enabling access through the use of assistive technology. A screen reader is one example of assistive technology. A magnifier is another example of assistive technology.

Screen readers
A screen reader is a software that has commands to quickly jump between headings or specific landmark regions (we'll learn about landmarks soon!).

A survey of screen reader users concludes that they usually navigate an unfamiliar page by exploring the headings.

This makes it essential to have meaningful headings. It helps users with assistive technologies easily navigate and explore your page. Note that this is not the only benefit of having meaningful headings. There are many benefits regarding Search Engine Optimization (SEO), browsers, etc.

Note that we've only learned about the Heading 1 element so far. So, this tip will make more sense once we learn about the remaining heading levels in the next chapter. We'll also revisit this accessibility recommendation in the next chapter.

Accessibility testing with Axe
Axe is an automated accessibility testing tool. It's available as a browser extension (Chrome, Firefox, and Edge at the moment), Command-Line tool, JavaScript SDK library, and more.

Throughout this course, we'll be using Axe to test your code for accessibility issues. We will do that step by step by introducing topics one by one so that you get to learn from the errors you see on Axe without being overwhelmed.

Please note that some manual accessibility testing is still necessary for a real-life project. No automated tool can catch all accessibility issues. However, having an automated accessibility testing tool will catch a big chunk of accessibility issues.

So, most challenges from now on will have the last "test" checking your code for accessibility issues. It will have the name Axe Accessibility checks.

If one of the checks is failing, you will get a descriptive error message and a link to read more. We'll see an example of a failed test in the next challenge!

Note: Since the next challenge will start testing you for accessibility issues, we will wrap all the code in the body element with the <main> tag. This is a landmark tag that we'll explain in a future chapter. Do not remove it; otherwise, the accessibility checks will fail!
