********************************************************************************
1.0 Intro to Semantics
********************************************************************************

When you read lessons in this course, you can highlight a single line and save it to your notes. Highlight a single line with your mouse (or your finger on mobile) and then a popup will appear asking you to save it to your notes.

You will be able to find these notes at the top of the page by clicking on the Note icon on the top bar. Give it a try!

Popular notes will also be shown in yellow highlights which can be added to your notes with a single click. You can also disable those popular highlights from the top-right menu.

The save notes popup will not show up if you select lines spanning multiple paragraphs. That's because you retain information better when you take shorter notes.

While writing a fully functioning website without proper semantics is possible, we do not recommend that. This course will guide you step by step on how to write semantic HTML. But first, what does semantic mean?

1.1 The meaning of semantic
********************************************************************************

In the English language, the word semantic means:

    relating to meaning in language or logic.

In the context of programming, semantics refers to:

    the meaning of a particular piece of code.

Both of these definitions are a bit generic. Let's explore what semantic means in the context of HTML.

1.2 Semantic HTML
********************************************************************************

Writing semantic HTML means giving meaning to the elements we use. It allows you to focus on the element's purpose rather than its appearance.

Let's take a look at the two examples, keeping in mind that we have yet to learn about all of these HTML elements:

<div>My Blog</div>
<div>
    <div>This is the content of my blog</div>
</div>
<div>We are located in Amsterdam</div>

<header>My Blog</header>
<main>
    <p>This is the content of my blog</p>
</main>
<footer>We are located in <address>Amsterdam</address></footer>

Even though we have not learned about any of the HTML elements yet, which one of these code snippets conveys more meaning?

From the first piece of code, we could not tell that the My Blog is necessarily functioning as the header of the website. And the same thing for the footer. Notice how the footer labels Amsterdam as the address of the blog. Moreover, the page's main content is enclosed in between the <main>...</main> tags.

Both examples will produce very similar results. However, the second example is written with semantics in mind.

In conclusion, semantic HTML focuses on providing meaning and purpose for the elements you use.

We will continue exploring the concept of semantics throughout this course as it's not limited to the above. We will go through it step by step so that it becomes fun rather than overwhelming.

1.3 Why write semantic HTML?
********************************************************************************

There are many benefits to writing semantic HTML. Some of the benefits below might not be very clear at this stage (as we have yet to learn about the various HTML elements). But don't worry about that! The concept of semantics is baked into this course, and we'll come back to the benefits on multiple occasions.

Some of the benefits of semantic HTML:

    It makes your code machine-readable. Browsers and search engines (for example, Google, DuckDuckGo, Bing, Yandex, etc.) will better understand your
    website.
        When browsers better understand your website, the accessibility of your website will improve (this is discussed in the next chapter).
        When search engines better understand your website, you get some benefits in Search Engine Optimization (SEO) â€” more on that in a later chapter.
    It helps you (as a developer) make sense of the information on the page, just like how we saw in the two code snippets above.
    It helps you maintain the code as it makes it a lot more readable.
    
*************************************************************************************************************************************************************
Recap

    Writing semantic HTML means giving meaning to the elements we use.
    Semantic HTML focuses on providing meaning and purpose for the elements you use.
    Some of the benefits of semantic HTML:
        It makes your code machine-readable. Browsers and search engines will better understand your website.
        It helps you make sense of the information on the page.
        It helps you maintain the code as it makes it a lot more readable.
*************************************************************************************************************************************************************

********************************************************************************
2.0 Intro to Headings
********************************************************************************

Every page of your website focuses on a particular topic. We should clearly label this topic for the browser and the user (semantics). The main topic of the page (which is also the most important topic) should be labeled with an h1 element.

2.1 The heading 1 (h1) element
********************************************************************************

The heading 1 h1 element, also called heading level 1, is used to represent the highest-level, most important topic of the current web page.

Let's take an example. If you visit Sir Tim Berners-Lee's Wikipedia page, which text will be labeled with an h1?

Browser screenshot of Sir Tim Berners-Lee's Wikipedia page

The h1 element is used to label Tim Berners-Lee because this page is talking about Tim Berners-Lee, which is the most important topic on this page.

The HTML code for it is:

<h1>Tim Berners-Lee</h1>

You open the <h1> tag, write the content of the heading, and then close with an </h1> closing tag (don't forget the / in the closing tag).

2.2 Heading element (not a header)
********************************************************************************

Sometimes developers confuse the heading element with the word header. They are not the same. We will learn about the header element later in this course.

You can think of a heading as one of the big titles you see in a newspaper.

2.3 Semantics vs. Appearance
********************************************************************************

This is a crucial and slightly tricky topic that many HTML developers/engineers struggle with. This is why we'll start covering it early on and revisit it on multiple occasions throughout this course.

When writing HTML code, it's important to focus on the semantics rather than the appearance. HTML is meant for the content, and the structure, whereas CSS is used to style that content (appearance).

You should not use an HTML element based on its appearance but rather its meaning/purpose/role. This is what we mean by semantic HTML.

Let's take a look at an example. Here's a screenshot of the MDN Web Docs' landing page:

Browser screenshot of MDN's landing page

Which text do you think is the h1 on this page? Is it:

    Resources for developers, by developers.
    or, Hacks Blog
    or, Help improve MDN Web Docs

Give it a try and guess which one of these 3 is the heading 1 of this page.
See answer

Instead of looking at the appearance, you should focus on the meaning and the role on the page. So, to get the correct answer, ask yourself: What is the most important topic on this page? The answer is that MDN provides Resources for developers, by developers.
Hacks Blog is not the most important topic of the page, nor is Help improve MDN Web Docs.

The font size (how big the characters appear) of the heading does not matter at this stage. Later on, once we learn about CSS, we'll learn how to make a heading larger or smaller. At this stage, it's important to understand that when we label an element as h1, we're signaling to the browser that this is the most important topic on the page (regardless of how large/small the font size is).

2.4 Examples of h1 usage
********************************************************************************

To better prepare you for the real world, here are some examples of what an h1 could be on different web pages in various industries:

    If I were to build a personal portfolio web page, the h1 would generally be my full name: <h1>Jad Joubran</h1>. It is also possible to have another text,
    for example, your expertise, if your website is more about your expertise than your personal brand. For example, <h1>Web performance consultant</h1>.
    On a blog post, the h1 should be the title of that blog post (rather than the blog's name). Let's say there's a blog called TechBlog that has a post
    talking about The benefits of semantic HTML; the h1 should wrap the title of the blog post: <h1>The benefits of semantic HTML</h1>.
    A web page comparing two phone models should have an h1 representing this comparison. For example, <h1>iPhone 13 vs Pixel 6</h1>.
    A web page showing movie reviews of a certain movie, for example, the movie Memento, will most likely have an <h1>Memento</h1> or <h1>Memento
    reviews</h1>.

After we learn about accessibility, we will have an entire chapter covering headings!

*************************************************************************************************************************************************************
Recap

    The heading 1 h1 element is used to represent the highest-level, most important topic of the current web page.
    <h1>Most important topic of the page</h1>
    When writing HTML code, it's important to focus on the semantics rather than the appearance. HTML is meant for the content, and the structure, whereas
    CSS is used to style that content (appearance).
    You should not use an HTML element based on its appearance but rather its meaning/purpose/role.
    If you're not sure which element should be labeled as the h1 on the page, ask yourself: What is the most important topic on this page?
*************************************************************************************************************************************************************

********************************************************************************
3.0 Intro to emmet
********************************************************************************
Before proceeding with the course, we'd like to teach you about emmet.

Emmet is a code editor plugin that allows you to write HTML faster (among other things).
If you're using Visual Studio Code, then emmet is already installed.

Emmet is also already installed in the desktop editor of this course. Unfortunately, if you're visiting the course on mobile, it won't work.

3.1 HTML element + tab
********************************************************************************

Instead of writing <h1>, you can write h1 and then press the Tab key on your keyboard, which will automatically convert it to <h1></h1>.

This saves you time from:

    writing the < and > characters (especially on some keyboard layouts where those keys are slightly hidden)
    writing the corresponding closing tag (</h1> in this example)

Generally, you will make fewer mistakes when using emmet, so we recommend that you get used to it from the start!

3.2 Emmet offers much more
********************************************************************************

Emmet offers a lot more! Here's a sneak peek, but promise that you won't get discouraged as the preview below contains lots of things that we have not explained yet!

This is a bit of an advanced use case, so don't worry if it looks like it's over complicated. It aims to 'show off' emmet's capabilities, but you don't always have to use them!

*************************************************************************************************************************************************************
Recap

    Emmet is a code editor plugin that allows you to write HTML faster (among other things).
    Instead of writing <h1></h1> yourself, you can type h1 and then press the Tab key on your keyboard and the h1 will automatically be replaced by
    <h1></h1>.
*************************************************************************************************************************************************************
